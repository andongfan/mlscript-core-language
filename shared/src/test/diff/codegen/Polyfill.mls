// If you didn't use any prelude, it will not be inserted.
:js
0
//│ // Prelude
//│ let res;
//│ // Query 1
//│ res = 0;
//│ // End of generated code
//│ res: 0
//│    = 0

// Look, prelude is empty!
:js
1
//│ // Query 1
//│ res = 1;
//│ // End of generated code
//│ res: 1
//│    = 1

// If we use `concat`, it will appear.
:js
concat "a" "b"
//│ // Prelude
//│ function concat(x, y) {
//│   if (arguments.length === 2) {
//│     return x + y;
//│   }else {
//│     return (y) => x + y;
//│   }
//│ }
//│ // Query 1
//│ res = concat("a")("b");
//│ // End of generated code
//│ res: string
//│    = 'ab'

// Define a function with the same name will shadow the default one. Of course!
:js
def add x y = x + y + x + y
//│ // Query 1
//│ globalThis.add = function add(x) {
//│   return (y) => x + y + x + y;
//│ };
//│ res = add;
//│ // End of generated code
//│ add: int -> int -> int
//│    = [Function: add]

// Now the add function is not the default one.
:js
add 1 2
//│ // Query 1
//│ res = add(1)(2);
//│ // End of generated code
//│ res: int
//│    = 6

:js
toString 0
//│ // Prelude
//│ function toString(x) {
//│   return String(x);
//│ }
//│ // Query 1
//│ res = toString(0);
//│ // End of generated code
//│ res: string
//│    = '0'
